name: Test Monorepo

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  # Job para tests unitarios con Jest
  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: [guiders-20]

    steps:
    - uses: actions/checkout@v4

    - name: Configurar Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: './package-lock.json'

    - name: Instalar dependencias
      run: |
        npm ci
        # Asegurarnos de que estamos en el directorio correcto
        echo "Directorios en la raíz del proyecto:"
        ls -la
        if [ -d "${{ matrix.project }}" ]; then
          echo "Entrando al directorio ${{ matrix.project }}"
          cd ${{ matrix.project }}
          npm ci
          # Instalar explícitamente las dependencias de rollup para Linux
          npm install @rollup/rollup-linux-x64-gnu
          cd ..
        else
          echo "Error: El directorio ${{ matrix.project }} no existe"
          exit 1
        fi

    - name: Ejecutar tests unitarios
      run: npm run test:jest:${{ matrix.project }}

  # Job para tests e2e con Cypress
  e2e-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: [guiders-20]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configurar Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: './package-lock.json'
    
    - name: Cache Cypress binary
      uses: actions/cache@v3
      with:
        path: ~/.cache/Cypress
        key: cypress-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          cypress-${{ runner.os }}-
    
    - name: Instalar dependencias globales
      run: |
        npm install -g @angular/cli
        npm install -g wait-on
    
    - name: Instalar dependencias del proyecto
      run: |
        npm ci
        # Instalar dependencias del proyecto específico
        if [ -d "${{ matrix.project }}" ]; then
          echo "Instalando dependencias en ${{ matrix.project }}"
          cd ${{ matrix.project }}
          npm ci --legacy-peer-deps
          cd ..
        else
          echo "Error: El directorio ${{ matrix.project }} no existe"
          exit 1
        fi
    
    # Instalar dependencias para Cypress en Ubuntu
    - name: Instalar dependencias de Cypress
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libnss3 libxss1 libxtst6 xauth xvfb
    
    # Ejecutar el servidor en segundo plano y luego las pruebas
    - name: Ejecutar servidor y tests e2e
      run: |
        # Verificar estructura del proyecto
        echo "Verificando estructura del proyecto..."
        ls -la
        
        if [ ! -d "${{ matrix.project }}" ]; then
          echo "Error: El directorio ${{ matrix.project }} no existe"
          exit 1
        fi
        
        # Iniciar el servidor de desarrollo en segundo plano
        echo "Iniciando servidor de desarrollo para ${{ matrix.project }}..."
        npm run start:${{ matrix.project }} &
        SERVER_PID=$!
        
        # Esperar a que el servidor esté listo
        echo "Esperando a que el servidor esté disponible..."
        npx wait-on http://localhost:4200 --timeout 180000
        
        # Verificar que el servidor responde
        echo "Verificando que el servidor responde..."
        curl -f http://localhost:4200 || (echo "Error: El servidor no responde" && kill $SERVER_PID && exit 1)
        
        # Ejecutar las pruebas de Cypress
        echo "Ejecutando tests de Cypress..."
        npm run test:cypress:headless:${{ matrix.project }}
        
        # Terminar el servidor
        kill $SERVER_PID || true
      env:
        # Variables de entorno para Cypress
        CYPRESS_baseUrl: http://localhost:4200
        # Configurar para modo headless
        CYPRESS_RUN_BINARY: /home/runner/.cache/Cypress/14.5.1/Cypress/Cypress
