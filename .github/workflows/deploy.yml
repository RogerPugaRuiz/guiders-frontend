# Workflow para deployment de Angular SSR a producci√≥n usando GitHub Environments
# .github/workflows/deploy.yml
name: Deploy Angular SSR to Production

on:
  push:
    branches:
      - main
  workflow_dispatch: # Permite ejecutar manualmente
    inputs:
      force_deploy:
        description: 'Forzar deployment (skip some checks)'
        required: false
        default: false
        type: boolean

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: deploy
    
    env:
      NODE_VERSION: '20'
      SSH_HOST: '10.8.0.1'
      SSH_USER: 'root'
      DEPLOY_PATH: '/var/www/guiders'
      BACKUP_PATH: '/tmp/guiders-backup'

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üü¢ Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ Install root dependencies
        run: npm ci --legacy-peer-deps

      - name: üì¶ Install Guiders-20 dependencies
        run: |
          cd guiders-20
          npm ci --legacy-peer-deps

      - name: üèóÔ∏è Build Angular SSR application
        run: |
          cd guiders-20
          npm run build:prod:env

      - name: üìÅ Verify build output
        run: |
          echo "Verificando estructura de build..."
          ls -la guiders-20/dist/
          if [ -d "guiders-20/dist/guiders-20" ]; then
            echo "‚úÖ Build exitoso"
            echo "üìÅ Contenido del build:"
            ls -la guiders-20/dist/guiders-20/
            if [ -d "guiders-20/dist/guiders-20/browser" ]; then
              echo "‚úÖ Cliente (browser) generado"
              ls -la guiders-20/dist/guiders-20/browser/ | head -10
            fi
            if [ -d "guiders-20/dist/guiders-20/server" ]; then
              echo "‚úÖ Servidor (SSR) generado"
              ls -la guiders-20/dist/guiders-20/server/ | head -10
              # Verificar que server.mjs existe
              if [ -f "guiders-20/dist/guiders-20/server/server.mjs" ]; then
                echo "‚úÖ server.mjs encontrado"
              else
                echo "‚ùå Error: server.mjs no encontrado"
                exit 1
              fi
            else
              echo "‚ùå Error: No se encontr√≥ el directorio server"
              exit 1
            fi
          else
            echo "‚ùå Error: No se encontr√≥ el directorio de build"
            exit 1
          fi

      - name: üîí Install OpenVPN
        run: sudo apt-get update && sudo apt-get install -y openvpn sshpass

      - name: üîß Setup OpenVPN config
        run: |
          echo "${{ secrets.OVPN_CONFIG }}" > vpn.conf
          chmod 600 vpn.conf

      - name: üåê Connect to VPN
        run: |
          sudo openvpn --config vpn.conf --daemon
          sleep 20
          echo "üîç Verificando conexi√≥n VPN..."
          ping -c 3 ${{ env.SSH_HOST }} || echo "‚ö†Ô∏è Ping fall√≥, continuando..."

      - name: üîë Add server to known_hosts
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keyscan -H ${{ env.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: üß™ Test SSH connection
        env:
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
        run: |
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no ${{ env.SSH_USER }}@${{ env.SSH_HOST }} \
            "echo '‚úÖ Conexi√≥n SSH exitosa'"

      - name: üõ°Ô∏è Create backup of current deployment
        env:
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
        run: |
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no ${{ env.SSH_USER }}@${{ env.SSH_HOST }} << 'EOF'
            # Crear backup con timestamp
            TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
            BACKUP_DIR="${{ env.BACKUP_PATH }}_${TIMESTAMP}"
            
            echo "üì¶ Creando backup en ${BACKUP_DIR}..."
            
            if [ -d "${{ env.DEPLOY_PATH }}" ]; then
              mkdir -p "${BACKUP_DIR}"
              cp -r ${{ env.DEPLOY_PATH }}/* "${BACKUP_DIR}/" || true
              echo "‚úÖ Backup creado exitosamente"
              
              # Mantener solo los √∫ltimos 5 backups
              ls -dt ${{ env.BACKUP_PATH }}_* | tail -n +6 | xargs rm -rf || true
            else
              echo "‚ö†Ô∏è No existe deployment anterior, creando directorio..."
              mkdir -p ${{ env.DEPLOY_PATH }}
            fi
          EOF

      - name: üõ†Ô∏è Prepare server environment
        env:
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
        run: |
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no ${{ env.SSH_USER }}@${{ env.SSH_HOST }} << 'EOF'
            # Esperar un momento para evitar conflictos con actualizaciones del OS
            echo "‚è≥ Esperando estabilizaci√≥n del sistema..."
            sleep 30
            
            # Verificar/instalar Node.js si no existe
            if ! command -v node &> /dev/null; then
              echo "üì• Instalando Node.js..."
              curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
              sudo apt-get install -y nodejs
            fi
            
            # Verificar versi√≥n de Node.js
            echo "üü¢ Node.js version: $(node --version)"
            echo "üì¶ NPM version: $(npm --version)"
            
            # Crear directorios necesarios
            mkdir -p ${{ env.DEPLOY_PATH }}/dist
            mkdir -p ${{ env.DEPLOY_PATH }}/logs
            
            # Instalar PM2 si no existe (para gesti√≥n de procesos)
            if ! command -v pm2 &> /dev/null; then
              echo "‚ö° Instalando PM2..."
              npm install -g pm2
            fi
            
            echo "üü¢ PM2 version: $(pm2 --version)"
          EOF

      - name: üöÄ Deploy Angular SSR application
        env:
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
        run: |
          echo "üöÄ Iniciando deployment..."
          
          # Sync del build completo (cliente + servidor)
          sshpass -p "$SSH_PASSWORD" rsync -avz --delete \
            -e "ssh -o StrictHostKeyChecking=no" \
            --progress \
            guiders-20/dist/guiders-20/ \
            ${{ env.SSH_USER }}@${{ env.SSH_HOST }}:${{ env.DEPLOY_PATH }}/dist/
          
          echo "‚úÖ Archivos sincronizados exitosamente"

      - name: üìã Deploy package.json and dependencies
        env:
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
        run: |
          # Copiar package.json y package-lock.json para las dependencias de producci√≥n
          sshpass -p "$SSH_PASSWORD" scp -o StrictHostKeyChecking=no \
            guiders-20/package.json \
            ${{ env.SSH_USER }}@${{ env.SSH_HOST }}:${{ env.DEPLOY_PATH }}/
          
          # Copiar package-lock.json si existe
          if [ -f guiders-20/package-lock.json ]; then
            sshpass -p "$SSH_PASSWORD" scp -o StrictHostKeyChecking=no \
              guiders-20/package-lock.json \
              ${{ env.SSH_USER }}@${{ env.SSH_HOST }}:${{ env.DEPLOY_PATH }}/
            echo "‚úÖ package.json y package-lock.json copiados"
          else
            echo "‚ö†Ô∏è package-lock.json no encontrado, solo package.json copiado"
          fi

      - name: üîß Install production dependencies
        env:
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
        run: |
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no ${{ env.SSH_USER }}@${{ env.SSH_HOST }} << 'EOF'
            cd ${{ env.DEPLOY_PATH }}
            echo "üì¶ Instalando dependencias de producci√≥n..."
            
            # Verificar que package.json existe
            if [ ! -f package.json ]; then
              echo "‚ùå Error: package.json no encontrado"
              exit 1
            fi
            
            # Instalar dependencias con fallback
            if [ -f package-lock.json ]; then
              npm ci --only=production --omit=dev --legacy-peer-deps
            else
              echo "‚ö†Ô∏è package-lock.json no encontrado, usando npm install"
              npm install --only=production --legacy-peer-deps
            fi
            
            echo "‚úÖ Dependencias instaladas"
          EOF

      - name: üîÑ Deploy PM2 ecosystem configuration
        env:
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
        run: |
          # Copiar archivo ecosystem.config.js predefinido al servidor
          sshpass -p "$SSH_PASSWORD" scp -o StrictHostKeyChecking=no \
            .github/ecosystem.config.js \
            ${{ env.SSH_USER }}@${{ env.SSH_HOST }}:${{ env.DEPLOY_PATH }}/
          
          echo "‚úÖ Archivo PM2 ecosystem copiado al servidor"

      - name: ‚ö° Start/Restart Angular SSR server
        env:
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
        run: |
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no ${{ env.SSH_USER }}@${{ env.SSH_HOST }} << 'EOF'
            cd ${{ env.DEPLOY_PATH }}
            
            echo "üîÑ Gestionando aplicaci√≥n PM2..."
            
            # Verificar que el archivo server.mjs existe
            if [ ! -f "./dist/server/server.mjs" ]; then
              echo "‚ùå Error: ./dist/server/server.mjs no encontrado"
              echo "üìÅ Contenido de ./dist/:"
              ls -la ./dist/
              if [ -d "./dist/server/" ]; then
                echo "üìÅ Contenido de ./dist/server/:"
                ls -la ./dist/server/
              fi
              exit 1
            fi
            
            # Detener aplicaci√≥n existente de forma segura
            if pm2 list | grep -q "guiders-ssr"; then
              echo "üõë Deteniendo aplicaci√≥n existente..."
              pm2 stop guiders-ssr || echo "‚ö†Ô∏è No se pudo detener la aplicaci√≥n"
              pm2 delete guiders-ssr || echo "‚ö†Ô∏è No se pudo eliminar la aplicaci√≥n"
            else
              echo "‚ÑπÔ∏è No hay aplicaci√≥n PM2 previa ejecut√°ndose"
            fi
            
            # Limpiar procesos PM2 si es necesario
            pm2 kill || echo "‚ÑπÔ∏è No hab√≠a procesos PM2 para limpiar"
            
            # Esperar un momento para que los procesos se liberen
            sleep 3
            
            # Iniciar aplicaci√≥n
            echo "üöÄ Iniciando aplicaci√≥n..."
            pm2 start ecosystem.config.js --env production
            
            # Guardar configuraci√≥n PM2
            pm2 save
            
            # Configurar PM2 para arranque autom√°tico
            pm2 startup || echo "‚ö†Ô∏è No se pudo configurar startup autom√°tico"
            
            echo "‚úÖ Aplicaci√≥n iniciada con PM2"
            echo "üìä Estado de la aplicaci√≥n:"
            pm2 status
            
            # Esperar a que la aplicaci√≥n arranque
            echo "‚è≥ Esperando que la aplicaci√≥n arranque..."
            sleep 10
            
            # Verificar que la aplicaci√≥n est√° respondiendo
            echo "üîç Verificando respuesta de la aplicaci√≥n..."
            for i in {1..6}; do
              if curl -f -s http://localhost:4000 > /dev/null 2>&1; then
                echo "‚úÖ Aplicaci√≥n respondiendo correctamente en puerto 4000"
                break
              else
                echo "‚è≥ Intento $i/6 - Esperando respuesta del servidor..."
                sleep 5
              fi
            done
            
            # Mostrar logs recientes si hay problemas
            if ! curl -f -s http://localhost:4000 > /dev/null 2>&1; then
              echo "‚ö†Ô∏è La aplicaci√≥n no responde, mostrando logs:"
              pm2 logs guiders-ssr --lines 20 --nostream || echo "No se pudieron obtener los logs"
            fi
          EOF

      - name: üßπ Cleanup and final verification
        env:
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
        run: |
          # Copiar script de verificaci√≥n al servidor
          sshpass -p "$SSH_PASSWORD" scp -o StrictHostKeyChecking=no \
            .github/verify-deployment.sh \
            ${{ env.SSH_USER }}@${{ env.SSH_HOST }}:${{ env.DEPLOY_PATH }}/
          
          # Ejecutar verificaci√≥n post-deployment
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no ${{ env.SSH_USER }}@${{ env.SSH_HOST }} << 'EOF'
            cd ${{ env.DEPLOY_PATH }}
            chmod +x verify-deployment.sh
            ./verify-deployment.sh
          EOF

      - name: üéâ Deployment Summary
        run: |
          echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **Build**: Angular SSR aplicaci√≥n compilada" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **Deploy**: Archivos sincronizados a servidor" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **Dependencies**: Dependencias de producci√≥n instaladas" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **Server**: Aplicaci√≥n SSR iniciada con PM2" >> $GITHUB_STEP_SUMMARY
          echo "- üåê **URL**: http://${{ env.SSH_HOST }}:4000" >> $GITHUB_STEP_SUMMARY
          echo "- üè∑Ô∏è **Environment**: deploy" >> $GITHUB_STEP_SUMMARY
          echo "- üìÖ **Deployed at**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "- üîó **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- Verificar que la aplicaci√≥n responde correctamente" >> $GITHUB_STEP_SUMMARY
          echo "- Configurar proxy reverso (Nginx) si es necesario" >> $GITHUB_STEP_SUMMARY
          echo "- Configurar SSL/HTTPS" >> $GITHUB_STEP_SUMMARY

      - name: üì¢ Update Deployment Status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentState = '${{ job.status }}' === 'success' ? 'success' : 'failure';
            const description = '${{ job.status }}' === 'success' 
              ? '‚úÖ Deployment completado exitosamente' 
              : '‚ùå Deployment fall√≥';
            
            // Crear deployment status
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment?.id || 0,
              state: deploymentState,
              description: description,
              environment: 'deploy',
              environment_url: 'http://${{ env.SSH_HOST }}:4000'
            });
            
            console.log(`Deployment status updated: ${deploymentState}`);
