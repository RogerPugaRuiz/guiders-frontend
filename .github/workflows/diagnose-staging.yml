# Workflow para diagnosticar problemas en staging
# .github/workflows/diagnose-staging.yml
name: Diagnose Staging Issues

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Acci√≥n a realizar'
        required: true
        default: 'full-diagnosis'
        type: choice
        options:
          - 'full-diagnosis'
          - 'restart-pm2'
          - 'check-logs'
          - 'test-connectivity'
          - 'rebuild-deploy'

jobs:
  diagnose:
    name: Staging Diagnosis
    runs-on: ubuntu-latest
    environment: staging
    
    env:
      STAGING_HOST: '${{ secrets.STAGING_HOST }}'
      STAGING_USER: '${{ secrets.STAGING_USER }}'
      STAGING_DEPLOY_PATH: '/var/www/guiders-frontend-staging'
    
    steps:
      - name: üîß Setup SSH
        run: |
          sudo apt-get update && sudo apt-get install -y sshpass
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ env.STAGING_HOST }} >> ~/.ssh/known_hosts

      - name: üîç Full Diagnosis
        if: ${{ inputs.action == 'full-diagnosis' }}
        env:
          SSH_PASSWORD: ${{ secrets.STAGING_SSH_PASSWORD }}
        run: |
          echo "üîç Ejecutando diagn√≥stico completo del servidor staging..."
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no \
            ${{ env.STAGING_USER }}@${{ env.STAGING_HOST }} << 'EOF'
            
            echo "=== DIAGN√ìSTICO COMPLETO DE STAGING ==="
            echo "Fecha: $(date)"
            echo ""
            
            echo "1. üìä Estado del sistema:"
            echo "Usuario actual: $(whoami)"
            echo "Directorio actual: $(pwd)"
            echo "Uptime: $(uptime)"
            echo ""
            
            echo "2. üü¢ Versiones instaladas:"
            echo "Node.js: $(node --version 2>/dev/null || echo 'No instalado')"
            echo "NPM: $(npm --version 2>/dev/null || echo 'No instalado')"
            echo "PM2: $(pm2 --version 2>/dev/null || echo 'No instalado')"
            echo ""
            
            echo "3. üìÅ Estado del directorio de deployment:"
            if [ -d "${{ env.STAGING_DEPLOY_PATH }}" ]; then
              echo "‚úÖ Directorio existe: ${{ env.STAGING_DEPLOY_PATH }}"
              echo "Contenido:"
              ls -la ${{ env.STAGING_DEPLOY_PATH }}
              echo ""
              
              echo "Verificando archivos cr√≠ticos:"
              if [ -f "${{ env.STAGING_DEPLOY_PATH }}/dist/guiders-20/server/server.mjs" ]; then
                echo "‚úÖ server.mjs existe"
                echo "Tama√±o: $(du -h ${{ env.STAGING_DEPLOY_PATH }}/dist/guiders-20/server/server.mjs)"
              else
                echo "‚ùå server.mjs NO existe"
                echo "Buscando archivos server:"
                find ${{ env.STAGING_DEPLOY_PATH }} -name "*server*" 2>/dev/null || echo "No encontrado"
              fi
              
              if [ -f "${{ env.STAGING_DEPLOY_PATH }}/ecosystem.staging.config.js" ]; then
                echo "‚úÖ Configuraci√≥n PM2 existe"
              else
                echo "‚ùå Configuraci√≥n PM2 NO existe"
              fi
            else
              echo "‚ùå Directorio NO existe: ${{ env.STAGING_DEPLOY_PATH }}"
            fi
            echo ""
            
            echo "4. ‚ö° Estado de PM2:"
            if command -v pm2 &> /dev/null; then
              echo "PM2 instalado correctamente"
              echo "Procesos PM2:"
              pm2 list || echo "Error al listar procesos PM2"
              echo ""
              
              echo "Informaci√≥n detallada de guiders-frontend-staging:"
              pm2 show guiders-frontend-staging 2>/dev/null || echo "Aplicaci√≥n no encontrada en PM2"
            else
              echo "‚ùå PM2 no est√° instalado"
            fi
            echo ""
            
            echo "5. üìù Logs de PM2:"
            echo "Logs de error:"
            if [ -f "/var/log/pm2/guiders-frontend-staging-error.log" ]; then
              echo "√öltimas 10 l√≠neas del log de error:"
              tail -10 /var/log/pm2/guiders-frontend-staging-error.log
            else
              echo "‚ùå Archivo de error no existe"
            fi
            echo ""
            
            echo "Logs de salida:"
            if [ -f "/var/log/pm2/guiders-frontend-staging-out.log" ]; then
              echo "√öltimas 10 l√≠neas del log de salida:"
              tail -10 /var/log/pm2/guiders-frontend-staging-out.log
            else
              echo "‚ùå Archivo de salida no existe"
            fi
            echo ""
            
            echo "6. üåê Estado de red:"
            echo "Puertos en uso:"
            netstat -tulpn | grep LISTEN | grep -E ':(3000|4000|4001|8080)' || echo "No hay puertos Angular t√≠picos en uso"
            echo ""
            
            echo "Procesos Node.js:"
            ps aux | grep node | grep -v grep || echo "No hay procesos Node.js corriendo"
            echo ""
            
            echo "7. üíæ Uso de recursos:"
            echo "Memoria:"
            free -h
            echo ""
            echo "Disco:"
            df -h | grep -E '/$|/var'
            echo ""
            
            echo "=== FIN DEL DIAGN√ìSTICO ==="
          EOF

      - name: üîÑ Restart PM2
        if: ${{ inputs.action == 'restart-pm2' }}
        env:
          SSH_PASSWORD: ${{ secrets.STAGING_SSH_PASSWORD }}
        run: |
          echo "üîÑ Reiniciando PM2..."
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no \
            ${{ env.STAGING_USER }}@${{ env.STAGING_HOST }} << 'EOF'
            
            echo "üõë Deteniendo aplicaci√≥n..."
            pm2 stop guiders-frontend-staging 2>/dev/null || echo "App no estaba corriendo"
            pm2 delete guiders-frontend-staging 2>/dev/null || echo "App no estaba en PM2"
            
            echo "üßπ Limpiando logs..."
            rm -f /var/log/pm2/guiders-frontend-staging*.log
            
            echo "üöÄ Iniciando aplicaci√≥n..."
            cd ${{ env.STAGING_DEPLOY_PATH }}
            if [ -f "ecosystem.staging.config.js" ]; then
              pm2 start ecosystem.staging.config.js
              sleep 5
              pm2 status
              pm2 logs guiders-frontend-staging --lines 10 --nostream
            else
              echo "‚ùå Configuraci√≥n PM2 no encontrada"
            fi
          EOF

      - name: üìù Check Logs
        if: ${{ inputs.action == 'check-logs' }}
        env:
          SSH_PASSWORD: ${{ secrets.STAGING_SSH_PASSWORD }}
        run: |
          echo "üìù Revisando logs..."
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no \
            ${{ env.STAGING_USER }}@${{ env.STAGING_HOST }} << 'EOF'
            
            echo "üìä Estado actual de PM2:"
            pm2 status
            echo ""
            
            echo "üìù Logs recientes (√∫ltimas 30 l√≠neas):"
            pm2 logs guiders-frontend-staging --lines 30 --nostream || echo "No hay logs disponibles"
            echo ""
            
            echo "üìÅ Archivos de log disponibles:"
            ls -la /var/log/pm2/guiders-frontend-staging* 2>/dev/null || echo "No hay archivos de log"
          EOF

      - name: üß™ Test Connectivity
        if: ${{ inputs.action == 'test-connectivity' }}
        env:
          SSH_PASSWORD: ${{ secrets.STAGING_SSH_PASSWORD }}
        run: |
          echo "üß™ Probando conectividad..."
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no \
            ${{ env.STAGING_USER }}@${{ env.STAGING_HOST }} << 'EOF'
            
            echo "üß™ Probando conectividad de la aplicaci√≥n..."
            
            echo "1. Puerto 4001:"
            if curl -f -s --max-time 10 http://localhost:4001 > /dev/null; then
              echo "‚úÖ Puerto 4001 responde"
              echo "Respuesta:"
              curl -s --max-time 5 http://localhost:4001 | head -10
            else
              echo "‚ùå Puerto 4001 no responde"
            fi
            echo ""
            
            echo "2. Conectividad al backend:"
            if curl -f -s --max-time 10 http://217.154.105.26/api > /dev/null; then
              echo "‚úÖ Backend responde"
            else
              echo "‚ùå Backend no responde"
            fi
            echo ""
            
            echo "3. Puertos en uso:"
            netstat -tulpn | grep LISTEN
          EOF

      - name: üèóÔ∏è Rebuild and Deploy
        if: ${{ inputs.action == 'rebuild-deploy' }}
        env:
          SSH_PASSWORD: ${{ secrets.STAGING_SSH_PASSWORD }}
        run: |
          echo "üèóÔ∏è Reconstruyendo y desplegando..."
          echo "Esta acci√≥n requiere el c√≥digo fuente. Usa el workflow 'Deploy to Staging (Simple)' en su lugar."
          echo "O ejecuta manualmente:"
          echo "git pull && npm run build:guiders-20:staging && ./deploy-staging.sh"

      - name: üìã Summary
        if: always()
        run: |
          echo "# üîç Staging Diagnosis Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Action:** ${{ inputs.action }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Server:** ${{ env.STAGING_HOST }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Path:** ${{ env.STAGING_DEPLOY_PATH }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üîß Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Review the diagnosis output above" >> $GITHUB_STEP_SUMMARY
          echo "2. If needed, run 'Deploy to Staging (Simple)' workflow" >> $GITHUB_STEP_SUMMARY
          echo "3. Check logs with: \`pm2 logs guiders-frontend-staging\`" >> $GITHUB_STEP_SUMMARY
